{"version":3,"sources":["Spinner.gif","features/Search/Search.js","features/Posts/Post.js","features/Posts/PostGroup.js","features/Posts/PostList.js","features/Main.js","app/listActions.js","app/listConstants.js","App.js","app/listReducers.js","app/store.js","serviceWorker.js","index.js","Derrit.png"],"names":["module","exports","Search","props","showFilter","onFilter","onFilterDate","onSearch","className","id","aria-hidden","placeholder","onChange","type","onInput","required","pattern","Post","post","details","date","Date","created_utc","toGMTString","thumbnail","src","logo","alt","width","title","ups","href","url","target","PostGroup","posts","postgroup","reduce","grouplist","item","subreddit","Object","entries","map","sort","posta","postb","key","PostList","Main","state","this","ondisplayList","filterSearchField","filterDateSearch","searchField","filterSearch","filterDate","isPending","error","mainposts","filter","toLowerCase","includes","getDay","filterField","Spinner","Component","connect","displayList","inputs","SearchList","filterDateField","dispatch","a","fetch","then","res","status","json","Error","statusText","data","children","payload","e","value","App","initialListState","action","assign","initialSearchState","initialFilterState","initialFilterDateState","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e3cda073.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Spinner.b49d8de4.gif\";","import React from 'react';\r\nimport \"./Search.scss\";\r\n\r\n\r\nconst Search = (props) => {\r\n\r\n    let {showFilter, onFilter, onFilterDate,  onSearch} = props;\r\n\r\n    return (\r\n        <div className=\"container text-center mt-3\">\r\n\r\n            <div className=\"input-group search\">\r\n                <div className=\"input-group-prepend\">\r\n                    <span className=\"input-group-text border-0 bg-transparent\" id=\"basic-addon1\"> <i className=\"fa fa-search\" aria-hidden=\"true\"></i> </span>\r\n                </div>\r\n                <input placeholder=\"Search for a category\" className=\"form-control\" onChange={onSearch} type=\"text\" />\r\n\r\n            </div>\r\n                {     showFilter ?\r\n                            <div> \r\n                                <h6 className=\"alert\">Filter Search by:</h6> \r\n                                <div className=\"d-flex flex-wrap justify-content-center\">\r\n                                    <small className=\"alert\">Date: \r\n                                    <input type=\"date\" className=\"form-control\"  onChange={onFilterDate} />\r\n                                    </small> \r\n                                    <small className=\"alert\"> <i className=\"fa fa-vote-yea\"></i>  <input type=\"text\" className=\"form-control\"   onInput={onFilter} placeholder=\"Number of upvotes\" required pattern=\"[0-9]\"  />  </small>\r\n                                </div>\r\n                            </div>\r\n                            :\r\n\r\n                            null\r\n                }\r\n          \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search\r\n","import React from 'react';\r\n//import moment from 'moment';\r\nimport logo from '../../Derrit.png';\r\nimport \"./posts.scss\";\r\n\r\n\r\nconst Post = (post) => {\r\n     let details = post.post;\r\n     let date = new Date(details.created_utc * 1000).toGMTString();\r\n    return (\r\n        <div className=\"mx-auto my-3 row justify-content-around main-post\">\r\n          <div className=\"col-md-3 img-section h-100\">\r\n            {\r\n              details.thumbnail === \"self\" ||  details.thumbnail === \"default\" ?\r\n              <img src={logo} alt=\"preview\" width=\"100\" />\r\n             \r\n             \r\n              :\r\n\r\n              <img src={details.thumbnail} alt=\"preview\" width=\"auto\" />\r\n\r\n              \r\n              \r\n\r\n            }\r\n           \r\n           </div>\r\n\r\n           <div className=\" col-md-6 extra-details h-100\">\r\n              <h6> Date Posted: { date } </h6>\r\n             <h5 className=\"font-weight-bold\"> {details.title}  </h5> \r\n\r\n             <div className=\"d-md-flex justify-content-between actions\">    <small> <i title=\"Upvotes\" className=\"fa fa-vote-yea    \"></i> {details.ups} </small>\r\n\r\n               <h6 > <a href={details.url} target=\"_blank noopener noreferer\" > View Post </a> </h6> </div>\r\n            \r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post\r\n","import React from 'react';\r\nimport Post from './Post';\r\nimport \"./posts.scss\";\r\n\r\nconst PostGroup = (posts) => {\r\n  \r\n    let items = posts.posts;\r\n    let postgroup = items.reduce((grouplist, item)=>{\r\n        grouplist[item.subreddit] = [...grouplist[item.subreddit] || [], item]\r\n        return grouplist;\r\n    }, {});\r\n    return (\r\n\r\n        Object.entries(postgroup).map(([item, index])=>{\r\n            let posts =  index.sort((posta, postb)=>postb.ups - posta.ups).map((post)=>{\r\n                return(\r\n                    <Post key={post.id} post={post} />\r\n                )\r\n\r\n            })\r\n           \r\n        return(\r\n           \r\n            <div key={item} className=\"row text-left mt-3 mx-0\">\r\n              <h6 className=\"group-name\"> {item} </h6> <button  className=\"btn \r\n              \"> <i className=\"fa fa-sort\" aria-hidden=\"true\"></i> Sort by Upvotes </button> \r\n              \r\n              <div className=\"col-12  h-auto m-0 \">\r\n                {posts}\r\n              </div>\r\n               \r\n            \r\n             </div>\r\n           \r\n        )\r\n    })\r\n  \r\n            \r\n    )\r\n}\r\n\r\n\r\n\r\nexport default PostGroup\r\n\r\n","import React from 'react'\r\nimport PostGroup from './PostGroup';\r\n\r\n\r\n /*class PostList extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n    \r\n        this.state = {\r\n            posts: ''\r\n             \r\n        }\r\n    }\r\n\r\n   /* async componentWillMount(){\r\n        await fetch(\"https://www.reddit.com/.json\")\r\n         .then( async (res) => {\r\n           //  await res.json();\r\n             if (res.status >= 200 && res.status <= 299) {\r\n                return res.json();\r\n              } else {\r\n                throw Error(res.statusText);\r\n              }\r\n            \r\n            })\r\n         .then( async data =>{\r\n             this.setState({\r\n                 posts: await data.data.children.map(post =>post.data) \r\n             })\r\n         }).catch((error) => {\r\n          \r\n               console.log(error)\r\n          \r\n          });\r\n    }\r\n\r\n\r\n    \r\n    render() {\r\n         let {posts} = this.state;\r\n        return (\r\n            <div className=\"container-fluid text-center mt-4\">\r\n\r\n                {\r\n                    posts ?\r\n                    <div>\r\n                       <h3 className=\"text-left\"> Categories </h3>\r\n                        <PostGroup posts={posts} />\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                        <img src={Spinner} alt=\"loading\" />\r\n                        <h6 className=\"alert\"> Loading list... </h6>\r\n                    </div>\r\n\r\n                   \r\n                }\r\n\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}*/\r\n\r\nconst  PostList = (posts) =>{\r\n\r\n    return (\r\n                <div>\r\n                    {\r\n                        posts.posts  ?\r\n                        <PostGroup posts={posts.posts} />\r\n                        :\r\n\r\n                        <h6 className=\"alert\">No posts found</h6>\r\n                    }\r\n                   \r\n                    \r\n                </div>   \r\n    )\r\n    \r\n}\r\n\r\nexport default PostList;\r\n","import React, { Component } from \"react\";\r\nimport Search from \"./Search/Search\";\r\nimport PostList from \"./Posts/PostList\";\r\nimport { connect } from \"react-redux\";\r\nimport { displayList, setSearchField, setFilter, setFilterDate } from \"../app/listActions\";\r\nimport Spinner from \"../Spinner.gif\";\r\nimport \"./Posts/posts.scss\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.displayList.inputs,\r\n    searchField: state.SearchList.searchField,\r\n    showFilter: state.SearchList.showFilter,\r\n    filterSearchField: state.filterSearch.filterField,\r\n    filterDateSearch: state.filterDateSearch.filterDateField,\r\n    isPending: state.displayList.isPending,\r\n    error: state.displayList.error,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    ondisplayList: () => dispatch(displayList()),\r\n    onSearch: (e) => dispatch(setSearchField(e.target.value)),\r\n    filterSearch: (e) => dispatch(setFilter(e.target.value)),\r\n    filterDate: (e) => dispatch(setFilterDate(e.target.value)),\r\n  };\r\n};\r\n\r\nclass Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      posts: this.props.posts,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.ondisplayList();\r\n  }\r\n  render() {\r\n    let {\r\n      posts,\r\n      filterSearchField,\r\n      filterDateSearch,\r\n      searchField,\r\n      onSearch,\r\n      filterSearch,\r\n      filterDate,\r\n      isPending,\r\n      error, showFilter\r\n    } = this.props;\r\n    \r\n\r\n    const mainposts = posts.filter((post) => {\r\n      if ( searchField && filterDateSearch) {\r\n        return post.subreddit.toLowerCase().includes(searchField.toLowerCase())  && new Date(post.created_utc * 1000).getDay() === new Date(filterDateSearch).getDay();      \r\n      } else if ( searchField && filterSearchField ) { \r\n    \r\n        return post.subreddit.toLowerCase().includes(searchField.toLowerCase()) && post.ups == filterSearchField;\r\n        \r\n      }  else if ( searchField && filterSearchField && filterDateSearch){\r\n          return  post.subreddit.toLowerCase().includes(searchField.toLowerCase()) && post.ups == filterSearchField  && new Date(post.created_utc * 1000).getDay() === new Date(filterDateSearch).getDay();      \r\n      } else if ( ( searchField && !filterSearchField && !filterDateSearch)){\r\n        return  post.subreddit.toLowerCase().includes(searchField.toLowerCase())\r\n      } return post \r\n     \r\n    });\r\n    return (\r\n      <div>\r\n        <Search showFilter={showFilter}\r\n          onFilter={filterSearch}\r\n          onFilterDate = {filterDate}\r\n          filterField={filterSearchField}\r\n          onSearch={onSearch}\r\n        />\r\n\r\n        <div className=\"container-fluid text-center mt-4\">\r\n          <h3 className=\"text-left\"> Categories </h3>\r\n\r\n          {isPending ? \r\n            <div>\r\n              <img src={Spinner} alt=\"loading\" />\r\n              <h6 className=\"alert\"> Loading posts... </h6>\r\n            </div>\r\n           : \r\n            <PostList  posts={mainposts} />\r\n          }\r\n\r\n      \r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);\r\n","import {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_LIST_PENDING,\r\n  REQUEST_LIST_SUCCESS,\r\n  REQUEST_LIST_FAILED,\r\n  FILTER_SEARCH,\r\n  FILTER_DATESEARCH,\r\n} from \"./listConstants\";\r\n\r\nexport const displayList = () => async (dispatch) => {\r\n  dispatch({ type: REQUEST_LIST_PENDING });\r\n  await fetch(\"https://www.reddit.com/.json\")\r\n    .then(async (res) => {\r\n      if (res.status >= 200 && res.status <= 299) {\r\n        return res.json();\r\n      } else {\r\n        throw Error(res.statusText);\r\n      }\r\n    })\r\n    .then(async data => {\r\n      try {\r\n        dispatch({ type: REQUEST_LIST_SUCCESS, payload: await data.data.children.map(post =>post.data)  });\r\n      } catch (error) {\r\n        dispatch({ type: REQUEST_LIST_FAILED, payload: error });\r\n      }\r\n    });\r\n};\r\n\r\nexport const setSearchField = (text) => {\r\n    return {\r\n        type: CHANGE_SEARCHFIELD, \r\n        payload: text \r\n    }\r\n}\r\n\r\nexport const setFilter = (text) => {\r\n    return {\r\n        type:  FILTER_SEARCH, \r\n        payload: text \r\n    }\r\n}\r\n\r\nexport const setFilterDate = (text) => {\r\n    return {\r\n        type:  FILTER_DATESEARCH, \r\n        payload: text \r\n    }\r\n}\r\n","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\nexport const REQUEST_LIST_PENDING = 'REQUEST_LIST_PENDING';\r\nexport const REQUEST_LIST_SUCCESS = 'REQUEST_LIST_SUCCESS';\r\nexport const REQUEST_LIST_FAILED = 'REQUEST_LIST_FAILED';\r\nexport const  FILTER_SEARCH = ' FILTER_SEARCH';\r\nexport const  FILTER_DATESEARCH = ' FILTER_DATESEARCH';","import React from 'react';\r\nimport logo from './Derrit.png';\r\nimport './scss/App.scss';\r\nimport Main from './features/Main';\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"d-flex justify-content-start\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />    \r\n      </header>\r\n       <Main />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import {\r\n    CHANGE_SEARCHFIELD,\r\n    REQUEST_LIST_PENDING,\r\n    REQUEST_LIST_SUCCESS,\r\n    REQUEST_LIST_FAILED,\r\n    FILTER_SEARCH,\r\n    FILTER_DATESEARCH,\r\n  } from \"./listConstants\";\r\n\r\n  const initialListState = { \r\n    inputs: [],\r\n    error: '',\r\n    isPending: false,\r\n}\r\n\r\nexport const displayList = (state= initialListState, action={}) =>{\r\n    switch (action.type) {\r\n        case REQUEST_LIST_PENDING:\r\n            return Object.assign({}, state, {isPending: true})\r\n        case REQUEST_LIST_SUCCESS:\r\n            return Object.assign({}, state, {inputs: action.payload, isPending: false})\r\n        case REQUEST_LIST_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false})\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n  const initialSearchState = {\r\n    searchField: '',\r\n    showFilter: false\r\n}\r\n\r\nexport const SearchList =  (state = initialSearchState, action = {}) => {    \r\n      switch (action.type) {\r\n          case CHANGE_SEARCHFIELD:\r\n               if (action.payload === '') {\r\n                   return  Object.assign({}, state, {searchField: action.payload, showFilter: false})\r\n               } else return Object.assign({}, state, {searchField: action.payload,  showFilter: true})\r\n          default:\r\n              return state;\r\n  \r\n      }\r\n  }\r\n\r\n  const initialFilterState = {\r\n    filterField: '',\r\n}\r\n\r\nexport const filterSearch = (state = initialFilterState, action = {}) => {\r\n      switch (action.type) {\r\n          case FILTER_SEARCH:\r\n              return Object.assign({}, state, {filterField: action.payload});\r\n          default:\r\n              return state;\r\n  \r\n      }\r\n  }\r\n\r\n  const initialFilterDateState = {\r\n    filterDateField: '',\r\n}\r\n\r\nexport const filterDateSearch = (state = initialFilterDateState, action = {}) => {\r\n      switch (action.type) {\r\n          case FILTER_DATESEARCH:\r\n              return Object.assign({}, state, {filterField: action.payload});\r\n          default:\r\n              return state;\r\n  \r\n      }\r\n  }\r\n\r\n  \r\n\r\nexport default displayList;","import {createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { displayList, SearchList, filterSearch, filterDateSearch } from \"./listReducers\";\r\n\r\nconst rootReducer = combineReducers({displayList, SearchList, filterSearch, filterDateSearch});\r\n\r\n const  store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\n export default store;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './scss/index.scss';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n","module.exports = __webpack_public_path__ + \"static/media/Derrit.3a7bda49.png\";"],"sourceRoot":""}